#ifndef SNOW_ACCU_MELT
#define SNOW_ACCU_MELT
/*
SnowAccuMelt.c
main process in snow accumulation and melting
*/
void Partition_RainSnow(
    double *Prec,    // precipitation, [depth unit],
    double *Tem_air, // air temperature, [celsius degree]
    double *Prec_rain, // rainfall, [depth unit]
    double *Prec_snow // snowfall, [depth unit]
);

void SnowAlbedo(
    double *Albedo,  // the albedo of snow (under specific season)
    double t,  // the time since the last snowfall (in hours)
    int stage  // season indicator (1: snow accumulation season) 
);

void SnowDensity(
    double *Density_snow,  // snow density, kg/m3
    // double *Depth_snow,  // the depth of snowpack, [m]
    double Tem_snow,   // temperature of snow surface, [celsius degree]
    double Density_BulkWater, //the bulk density of the liquid water in the snowpack.
    double Wns,   //  amounts of newly fallen snow (in water equivalent units, m)
    double Ws,    // amounts of snow on the ground (in water equivalent units, m)
    double time_interval // time interval / time step, hours
);

double SNOW_depth(
    double SNOW_DENSITY,    // snowpack density, kg/m3
    double W        // snowpack water equivalent, m
);

double CanopySnowCapacity(
    double Tem_air,  // ambient air temperature, degree Celsius
    double LAI       // single-sided leaf-area-index of canopy
);

void SnowMassBalance(
    double Qr,            // net radiation flux, kJ/(m2 * h)
    double Qs,            // sensible radiation flux,
    double Qe,            // latent heat flux,
    double Qp,            // adverted flux to snowpack from precipitation
    double *Tem_snow,     // temperature of snowpack, [Celsius degree]
    double *Wliq,         // liquid phase mass in the snowpack, [m]
    double *Wsol,         // solid phase mass in the snowpack, [m]
    double *W,            // SWE (snow water equivalent, m) of the snow pack
    double Prec_liq,      // input liquid phase water, [m]
    double Prec_sol,      // input solid phase water, [m]
    double Time_step,     // time interval for each iteration, [hours]
    double *Snow_runoff,  // the SWE generated by melting from snowpack as runoff, [m]
    double *MASS_release, // mass release from snowpack (canopy)
    double *THROUGHFALL_rain,
    double Canopy_snow_c, // maximum interception capacity of canopy snow, [m]
    double LAI2,          // all-sided leaf-area-index
    int G_or_C            // indicator, 1: ground snow; 0: canopy snow
);

#endif
